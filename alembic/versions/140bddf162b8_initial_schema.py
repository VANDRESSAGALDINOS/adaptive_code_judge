"""initial schema

Revision ID: 140bddf162b8
Revises: 
Create Date: 2025-08-13 15:26:34.409307

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '140bddf162b8'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('language_policy',
    sa.Column('language', sa.Text(), nullable=False),
    sa.Column('factor_floor', sa.Float(), nullable=False),
    sa.Column('factor_cap', sa.Float(), nullable=False),
    sa.Column('cpu_limit', sa.Text(), nullable=False),
    sa.Column('mem_limit', sa.Text(), nullable=False),
    sa.Column('stack_limit', sa.Text(), nullable=True),
    sa.Column('iqr_stable_pct', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('language')
    )
    op.create_table('problems',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('problem_id', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('max_input_size', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('problem_id')
    )
    op.create_table('benchmarks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('problem_id', sa.Text(), nullable=False),
    sa.Column('date_run', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('base_time_cpp', sa.Float(), nullable=True),
    sa.Column('cpp_median', sa.Float(), nullable=True),
    sa.Column('python_median', sa.Float(), nullable=True),
    sa.Column('adjustment_factor_python', sa.Float(), nullable=True),
    sa.Column('python_runs', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('cpp_runs', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status_python', sa.Text(), nullable=True),
    sa.Column('status_cpp', sa.Text(), nullable=True),
    sa.Column('notes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('small_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('medium_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('large_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['problem_id'], ['problems.problem_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_cases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('problem_id', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('input_data', sa.Text(), nullable=False),
    sa.Column('expected_output', sa.Text(), nullable=True),
    sa.Column('weight', sa.Integer(), nullable=False),
    sa.Column('is_max_case', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problems.problem_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('problem_benchmark_active',
    sa.Column('problem_id', sa.Text(), nullable=False),
    sa.Column('benchmark_id', sa.Integer(), nullable=False),
    sa.Column('set_by', sa.Text(), nullable=True),
    sa.Column('set_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['benchmark_id'], ['benchmarks.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['problem_id'], ['problems.problem_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('problem_id')
    )
    op.create_table('submissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('problem_id', sa.Text(), nullable=False),
    sa.Column('language', sa.Text(), nullable=False),
    sa.Column('source_code', sa.Text(), nullable=False),
    sa.Column('execution_time_total', sa.Float(), nullable=True),
    sa.Column('result', sa.Text(), nullable=True),
    sa.Column('executed_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('benchmark_id_used', sa.Integer(), nullable=True),
    sa.Column('base_time_cpp_used', sa.Float(), nullable=True),
    sa.Column('factor_used', sa.Float(), nullable=True),
    sa.Column('time_limit_applied', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['benchmark_id_used'], ['benchmarks.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['problem_id'], ['problems.problem_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('submission_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('submission_id', sa.Integer(), nullable=False),
    sa.Column('test_case_id', sa.Integer(), nullable=False),
    sa.Column('passed', sa.Boolean(), nullable=False),
    sa.Column('execution_time', sa.Float(), nullable=True),
    sa.Column('error_type', sa.Text(), nullable=True),
    sa.Column('stdout_preview', sa.Text(), nullable=True),
    sa.Column('stderr_preview', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['submission_id'], ['submissions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['test_case_id'], ['test_cases.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('submission_id', 'test_case_id', name='uq_submission_results')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('submission_results')
    op.drop_table('submissions')
    op.drop_table('problem_benchmark_active')
    op.drop_table('test_cases')
    op.drop_table('benchmarks')
    op.drop_table('problems')
    op.drop_table('language_policy')
    # ### end Alembic commands ###
